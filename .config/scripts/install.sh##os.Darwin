#!/bin/bash

set -e
set -x

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Detect CPU architecture
detect_arch() {
    local arch=$(uname -m)
    case $arch in
        x86_64)
            ARCH="amd64"
            ;;
        aarch64)
            ARCH="arm64"
            ;;
        arm64)
            ARCH="arm64"
            ;;
        *)
            echo "Unsupported architecture: $arch"
            exit 1
            ;;
    esac
}


# Install required dependencies based on detected distribution
install_dependencies() {
    brew install ansible
}


# Source homebrew env
eval $(/opt/homebrew/bin/brew shellenv)

detect_arch
install_dependencies

# # Install brewfiles
# echo "Installing brewfiles"
# if [ -d "$HOME/.config/brewfiles" ]; then
#     brew bundle install --file="$HOME/.config/brewfiles/minimal/Brewfile"
#     brew bundle install --file="$HOME/.config/brewfiles/coding/Brewfile"
# fi


# Ansible install
pushd /"${HOME}"/.config/ansible_playbooks
ansible-playbook -v -i inventory.ini playbook.yml --become --ask-become-pass -e "ansible_user_name=$USER"
popd

# Call into post_install.sh
bash "$SCRIPT_DIR/post_install.sh"

# if command -v python3 > /dev/null 2>&1; then
#     if [ -f "$HOME/.config/scripts/setup_zshrc.py" ]; then
#         python3 "$HOME/.config/scripts/setup_zshrc.py"
#     else
#         echo "Not able to find setup_zshrc.py"
#     fi
# else
#     echo "Not able to find python3"
#     exit 1
# fi

# # Go to mac_wizard.zsh
# if [ -f "$HOME/.config/scripts/mac_wizard.zsh" ]; then
#     zsh "$HOME/.config/scripts/mac_wizard.zsh"
# else
#     echo "Not able to find mac_wizard.zsh"
#     exit 1
# fi